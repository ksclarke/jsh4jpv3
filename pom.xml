<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <artifactId>jsh4jpv3</artifactId>
  <packaging>jar</packaging>
  <version>${revision}</version>

  <name>jsh4jpv3</name>
  <description>A JShell service to evaluate JPv3 scripts</description>
  <url>http://projects.freelibrary.info/jsh4jpv3</url>

  <licenses>
    <license>
      <name>Mozilla Public License 2.0 (MPL-2.0)</name>
      <url>https://opensource.org/licenses/MPL-2.0</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:ksclarke/jsh4jpv3.git</connection>
    <developerConnection>scm:git:git@github.com:ksclarke/jsh4jpv3.git</developerConnection>
    <url>git@github.com:ksclarke/jsh4jpv3.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/ksclarke/jsh4jpv3/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <id>ksclarke</id>
      <name>Kevin S. Clarke</name>
      <email>ksclarke@ksclarke.io</email>
      <timezone>America/New_York</timezone>
    </developer>
    <!-- Also https://github.com/ksclarke/jsh4jpv3/graphs/contributors -->
  </developers>

  <properties>
    <revision>0.0.0-SNAPSHOT</revision>

    <!-- Dependency versions -->
    <microhttp.version>0.11</microhttp.version>
    <jpv3.version>0.0.0-SNAPSHOT</jpv3.version>

    <!-- Docker component versions -->
    <docker.alpine.version>21.0.2_13</docker.alpine.version>

    <!-- Plugin related versions -->
    <docker.plugin.version>0.42.1</docker.plugin.version>
    <deploy.plugin.version>3.1.1</deploy.plugin.version>
    <maven.shade.version>3.5.2</maven.shade.version>

    <!-- Test dependency versions -->
    <junit.version>5.10.2</junit.version>

    <!-- The Docker registry user and password used for publishing images -->
    <docker.registry.username />
    <docker.registry.password />
    <!-- The Docker registry account, if supplied, must end with a slash (e.g. "account/") -->
    <docker.registry.account />

    <!-- Skip the requirement that none of the dependencies are snapshot versions -->
    <enforcer.skip>true</enforcer.skip>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.microhttp</groupId>
      <artifactId>microhttp</artifactId>
      <version>${microhttp.version}</version>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>jiiify-presentation-v3</artifactId>
      <version>${jpv3.version}</version>
    </dependency>

    <!-- Dependencies used for testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven.shade.version}</version>
        <executions>
          <execution>
            <id>uber-jar</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>uber</shadedClassifierName>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>module-info.class</exclude>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                    <exclude>META-INF/NOTICE</exclude>
                    <exclude>META-INF/LICENSE</exclude>
                    <exclude>META-INF/LICENSE.txt</exclude>
                    <exclude>META-INF/MANIFEST.MF</exclude>
                    <exclude>META-INF/versions/9/module-info.class</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>info.freelibrary.jsh4jvp3.Server</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <links>
            <link>
              https://javadoc.io/doc/info.freelibrary/freelib-utils/${freelib.utils.version}/apidocs</link>
          </links>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-web-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/webroot</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/webapp</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>${jacoco.agent.arg}</argLine>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <server.port>${test.http.port}</server.port>
          </systemPropertyVariables>
          <argLine>--add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED</argLine>
        </configuration>
      </plugin>


      <!-- Disable standard deploy; we publish a Docker image, not Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${deploy.plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Creates a Docker image and uses it for functional testing -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.plugin.version}</version>
        <configuration>
          <imagesMap>
            <image>
              <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
              <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
              <name>${docker.registry.account}${project.artifactId}:%l</name>
              <build>
                <args>
                  <ALPINE_TAG>${docker.alpine.version}</ALPINE_TAG>
                </args>
                <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
                <buildx>
                  <platforms>
                    <platform>linux/amd64</platform>
                  </platforms>
                </buildx>
                <assembly>
                  <inline>
                    <fileSets>
                      <fileSet>
                        <!-- The directory where we can find our Maven-built artifact -->
                        <directory>${project.basedir}/target/</directory>
                        <!-- We don't want directory structure on output, just the artifact -->
                        <outputDirectory>.</outputDirectory>
                        <includes>
                          <include>${project.artifactId}-${project.version}-uber.jar</include>
                        </includes>
                      </fileSet>
                    </fileSets>
                  </inline>
                </assembly>
              </build>
              <run>
                <containerNamePattern>${project.artifactId}</containerNamePattern>
                <ports>
                  <port>${test.http.port}:8888</port>
                </ports>
                <!-- Test to make sure the server started as expected -->
                <!--<wait>
                  <http>
                    <url>http://localhost:${test.http.port}/status</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                </wait>-->
              </run>
            </image>
          </imagesMap>
        </configuration>
        <executions>

          <!-- Builds the Docker image -->
          <execution>
            <id>docker-build</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>

          <!-- Creates and starts the Docker containers for integration testing -->
          <execution>
            <id>docker-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>

          <!-- Stops and removes the integration tests' Docker containers -->
          <execution>
            <id>docker-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <allContainers>true</allContainers>
            </configuration>
          </execution>

          <!-- Deploys the application's Docker image -->
          <execution>
            <id>docker-deploy</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
            <configuration>
              <images>
                <image>
                  <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
                  <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
                  <name>${docker.registry.account}${project.artifactId}:%l</name>
                </image>
              </images>
              <authConfig>
                <username>${docker.registry.username}</username>
                <password>${docker.registry.password}</password>
              </authConfig>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>8.0.7</version>
  </parent>

</project>
